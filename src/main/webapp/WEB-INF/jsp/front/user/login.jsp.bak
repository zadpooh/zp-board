<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

	<article class="common-page page-login">
		<header class="common-page-title">
			<h2 class="title">로그인</h2>
		</header>

		<form action="/user/authLogin" method="post" class="login-frm">
			<div class="copy">
				<p class="main">NINANO에 방문해 주셔서<br> 감사합니다.</p>
				<p class="sub">로그인 하시면 나의 영상을<br> 게시할 수 있습니다.</p>
			</div>
			<div class="wrap">
				<section class="login">
					<h3 class="hide">회원로그인</h3>
					<div class="frm-area">
						<label class="userid">
							<input type="text" id="userid" name="username" title="ID" class="basic-txt userid" placeholder="Id" value="${testtest}" />
						</label>
						<label class="passwd">
							<input type="password" id="passwd" name="password" title="PW" class="basic-txt passwd" placeholder="Password" value="" />
						</label>
						<button type="submit" class="btn primary btn-login">로그인</button>
					</div>

					<div class="action">
						<a href="#" onclick="showLayerPop('#popFindId'); return false;">아이디찾기</a>
						/
						<a href="#" onclick="showLayerPop('#popFindPassword'); return false;">비밀번호찾기</a>
						<br>
						아직 회원이 아니신가요?  <a href="./join.html" class="join-link">가입하기</a>
					</div>
				</section>

				<section class="social">
					<h3 class="hide">소셜로그인</h3>
					<a href="#" class="btn full social-login facebook" id="facebookLogin">Facebook 로그인</a>
					<a href="#" class="btn full social-login google" onClick="handleSignInClick()">Google 로그인</a>
					<a href="#" class="btn full social-login kakao" onClick="loginWithKakao()">Kakao 로그인</a>
				</section>
			</div>
		</form>
		
		<script async defer src="https://apis.google.com/js/api.js"
	      onload="this.onload=function(){};handleClientLoad()"
	      onreadystatechange="if (this.readyState === 'complete') this.onload()">
	    </script>
		
		<script>
			var $sessionName = "${userDetail.name}";
			  // This is called with the results from from FB.getLoginStatus().
			  function statusChangeCallback(response) {
			    console.log('statusChangeCallback');
			    console.log(response);
			    // The response object is returned with a status field that lets the
			    // app know the current login status of the person.
			    // Full docs on the response object can be found in the documentation
			    // for FB.getLoginStatus().
			    if (response.status === 'connected') {
			    	
 			    	console.log(response.authResponse.accessToken);
// 			    	testAPI();
			    	if( $sessionName == null || $sessionName == "" ) {
				    	$.get("/user/auth-login","",function(resp){
				    		if( resp == "success" ){
					    		location.reload();
				    		}
				    	});
			    	}
			    	
			      // Logged into your app and Facebook.
			    } else if (response.status === 'not_authorized') {
			      // The person is logged into Facebook, but not your app.
			      //document.getElementById('status').innerHTML = 'Please log ' +
			      //  'into this app.';
			    } else {
			      // The person is not logged into Facebook, so we're not sure if
			      // they are logged into this app or not.
			      //document.getElementById('status').innerHTML = 'Please log ' +
			      //  'into Facebook.';
			    }
			  }
			  
			  $("#facebookLogin").on("click",function(){
				  /* FB.logout(function(response) { // 사용자 로그 아웃 이후 콜백처리
					  location.reload();
				  }); */
				  
	
				 FB.login(function(response) {
					 //statusChangeCallback(response);
				 }, {scope: 'public_profile,email'});
				  
	// 			 FB.logout(function(response) {
	// 			     console.log(response);
	// 			 });
			  });
				  
	
			  // This function is called when someone finishes with the Login
			  // Button.  See the onlogin handler attached to it in the sample
			  // code below.
			  function checkLoginState() {
			    FB.getLoginStatus(function(response) {
			      statusChangeCallback(response);
			    });
			  }
			
			  window.fbAsyncInit = function() {
				  FB.init({
				    appId      : '1127556197322772',
				    cookie     : true,  // enable cookies to allow the server to access 
				                        // the session
				    xfbml      : true,  // parse social plugins on this page
				    version    : 'v2.8' // use graph api version 2.8
				  });
				
				  // Now that we've initialized the JavaScript SDK, we call 
				  // FB.getLoginStatus().  This function gets the state of the
				  // person visiting this page and can return one of three states to
				  // the callback you provide.  They can be:
				  //
				  // 1. Logged into your app ('connected')
				  // 2. Logged into Facebook, but not your app ('not_authorized')
				  // 3. Not logged into Facebook and can't tell if they are logged into
				  //    your app or not.
				  //
				  // These three cases are handled in the callback function.
				
				  FB.getLoginStatus(function(response) {
				    statusChangeCallback(response);
				  });
			  };
			
			  // Load the SDK asynchronously
			  (function(d, s, id) {
			    var js, fjs = d.getElementsByTagName(s)[0];
			    if (d.getElementById(id)) return;
			    js = d.createElement(s); js.id = id;
			    js.src = "//connect.facebook.net/en_US/sdk.js";
			    fjs.parentNode.insertBefore(js, fjs);
			  }(document, 'script', 'facebook-jssdk'));
			
			  // Here we run a very simple test of the Graph API after login is
			  // successful.  See statusChangeCallback() for when this call is made.
			  function testAPI() {
			    FB.api('/me?fields=name,email', function(response) {
			      console.log(response);
			    });
			  }
			</script>
			
			<script type="text/javascript">
			function handleClientLoad() {
		        // Loads the client library and the auth2 library together for efficiency.
		        // Loading the auth2 library is optional here since `gapi.client.init` function will load
		        // it if not already loaded. Loading it upfront can save one network request.
		        gapi.load('client:auth2', initClient);
		      }
	
		      function initClient() {
		        // Initialize the client with API key and People API, and initialize OAuth with an
		        // OAuth 2.0 client ID and scopes (space delimited string) to request access.
		        gapi.client.init({
		            apiKey: 'AIzaSyBSQiaQcEeBYmz-Iymgwu_tUhC36kak-Pc',
		            discoveryDocs: ["https://people.googleapis.com/$discovery/rest?version=v1"],
		            clientId: '187018023042-iumd4kavu8qt1q6cgo9be6fp8n1f01ql.apps.googleusercontent.com',
		            scope: 'profile'
		        }).then(function () {
		          // Listen for sign-in state changes.
		          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
		          // Handle the initial sign-in state.
		          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
		        });
		      }
	
		      function updateSigninStatus(isSignedIn) {
		        // When signin status changes, this function is called.
		        // If the signin status is changed to signedIn, we make an API call.
		        if (isSignedIn) {
		        	
		          makeApiCall();
		        }
		      }
	
		      function handleSignInClick(event) {
		        // Ideally the button should only show up after gapi.client.init finishes, so that this
		        // handler won't be called before OAuth is initialized.
		        
				  var myParams = {
				    'clientid' : '187018023042-iumd4kavu8qt1q6cgo9be6fp8n1f01ql.apps.googleusercontent.com',
				    'cookiepolicy' : 'single_host_origin',
				    'callback' : 'loginCallback',
				    'approvalprompt':'force',
				    'scope' : 'https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/plus.profile.emails.read'
				  };
				  gapi.auth.signIn(myParams);
		        //gapi.auth2.getAuthInstance().signIn();
		      }
	
		      function handleSignOutClick(event) {
		        gapi.auth2.getAuthInstance().signOut();
		      }
	
		      function makeApiCall() {
		    	  
		    	  if( $sessionName == null ) {
				    	$.get("auth-login","",function(resp){
				    		if( resp == "" ){
					    		location.reload();
				    		}
				    	});
			    	}
		    	  
		        // Make an API call to the People API, and print the user's given name.
		        gapi.client.people.people.get({
		          resourceName: 'people/me'
		        }).then(function(response) {
// 		        	console.log(response);
// 		        	console.log(response.result);
		          console.log('Hello, ' + response.result.names[0].givenName);
		        }, function(reason) {
		          console.log('Error: ' + reason.result.error.message);
		        });
		      }
		      
			// Handle the result of a gapi.auth.authorize() call.
// 			function handleAuthResult(authResult) {
// 			  if (authResult && !authResult.error) {
// 			    // Authorization was successful. Hide authorization prompts and show
// 			    // content that should be visible after authorization succeeds.
// 				  console.log(authResult);
// 			  } else {
// 			    // Make the #login-link clickable. Attempt a non-immediate OAuth 2.0
// 			    // client flow. The current function is called when that flow completes.
// 			  }
// 			}
		
// 			function logout()
// 			{
// 			    gapi.auth.signOut();
// 			    location.reload();
// 			}
			
// 			function login() 
// 			{
// 			  var myParams = {
// 			    'clientid' : '187018023042-iumd4kavu8qt1q6cgo9be6fp8n1f01ql.apps.googleusercontent.com',
// 			    'cookiepolicy' : 'single_host_origin',
// 			    'callback' : 'loginCallback',
// 			    'approvalprompt':'force',
// 			    'scope' : 'https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/plus.profile.emails.read'
// 			  };
// 			  gapi.auth.signIn(myParams);
// 			}
			
			function loginCallback(result)
			{
			    if(result['status']['signed_in'])
			    {
			    	console.log(result.access_token);
			    	makeApiCall();
			    }
			 
			}
			
// 			function onLoadCallback()
// 			{
// 			    gapi.client.setApiKey('AIzaSyBSQiaQcEeBYmz-Iymgwu_tUhC36kak-Pc');
// 			    gapi.client.load('plus', 'v1',function(){});
			    
// 			    gapi.auth.authorize({
// 				    client_id: "187018023042-iumd4kavu8qt1q6cgo9be6fp8n1f01ql.apps.googleusercontent.com",
// 				    scope: "https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/plus.profile.emails.read",
// 				    immediate: true
// 				}, handleAuthResult); 
// 			}
		 
// 			(function() {
// 				var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
// 				po.src = 'https://apis.google.com/js/client.js?onload=onLoadCallback';
// 				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
// 			})();
		</script>
		
		<script type='text/javascript'>
		  //<![CDATA[
		    // 사용할 앱의 JavaScript 키를 설정해 주세요.
		    Kakao.init('dd807357374d8beebd543bcdb0cb95fb');
		    function loginWithKakao() {
		      // 로그인 창을 띄웁니다.
		      Kakao.Auth.login({
		        success: function(authObj) {
		          console.log(JSON.stringify(authObj));
		          /* var $data = {
					"propertyKeys" : "name"	  
		          }; */
		          Kakao.API.request({
		        	    url: '/v1/user/me',
		        	    success: function(res) {
		        	    	console.log(JSON.stringify(res));
		        	    },
		        	    fail: function(error) {
		        	    	console.log(JSON.stringify(error))
		        	    }
		        	});
		        },
		        fail: function(err) {
		          alert(JSON.stringify(err));
		        }
		      });
		    };
		  //]]>
		</script>
				

		<script>
			// 로그인
			$(function() {
				var $frm = $('.login-frm');
				var $inputs = $frm.find('.basic-txt');
				var $id = $inputs.filter('.userid');
				var $pw = $inputs.filter('.passwd');
	
				$frm.on('submit', function() {
					if($id.val() === '') {
						alert("아이디를 입력해주세요");
						$id.focus();
						return false;
					}
					if($pw.val() === '') {
						alert("비밀번호를 입력해주세요");
						$pw.focus();
						return false;
					}
				});
			});
		</script>

	</article>

	<!-- 팝업 : 아이디 찾기  -->
	<article id="popFindId" class="layer-pop pop-find-idpw" style="display: none;">
		<div class="layer-main">
			<div class="con-body">
				<header class="pop-header">
					<h1>아이디 찾기</h1>
					<p class="desc">등록하신 E-mail 주소를 입력하시면, <br>아이디를 보내드립니다.</p>
					<button type="button" class="btn-layer-close">닫기</button>
				</header>
				<form method="post" class="body">
					<fieldset>
						<legend>아이디 찾기</legend>
						<label for="userid" class="hide">E-mail 입력</label>
						<input type="text" id="userid" class="basic-txt full" placeholder="E-mail 을 입력해 주세요.">
						<button type="submit" class="btn primary full btn-submit">보내기</button>
					</fieldset>
				</form>
			</div>
		</div>
	</article>

	<!-- 팝업 : 비밀번호 찾기  -->
	<article id="popFindPassword" class="layer-pop pop-find-idpw" style="display: none;">
		<div class="layer-main">
			<div class="con-body">
				<header class="pop-header">
					<h1>비밀번호 찾기</h1>
					<p class="desc">등록하신 E-mail 주소를 입력하시면, <br>임시 비밀번호를 보내드립니다.</p>
					<button type="button" class="btn-layer-close">닫기</button>
				</header>
				<form method="post" class="body">
					<fieldset>
						<legend>비밀번호 찾기</legend>
						<label for="passwd" class="hide">E-mail 입력</label>
						<input type="text" id="passwd" class="basic-txt full" placeholder="E-mail 을 입력해 주세요.">
						<button type="submit" class="btn primary full btn-submit">보내기</button>
					</fieldset>
				</form>
			</div>
		</div>
	</article>